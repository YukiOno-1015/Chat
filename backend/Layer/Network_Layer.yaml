AWSTemplateFormatVersion: 2010-09-09
Description: Network_Layer Template
# ------------------------------------------------------------#
#  Parameters
# ------------------------------------------------------------#
Parameters:
  CidrBlock:
    Description: Please input an IP range
    Type: String
    Default: 10.0.0.0/16
  AvailabilityZone1:
    Description: Please input Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a


Resources:
# ------------------------------------------------------------#
#  VPC
# ------------------------------------------------------------#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC

# ------------------------------------------------------------#
#  Subnet
# ------------------------------------------------------------#
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 1, 8 ]]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 2, 8 ]]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetB

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 4, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnetB

# ------------------------------------------------------------#
#  Internet Gateway
# ------------------------------------------------------------#
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

 # ------------------------------------------------------------#
  #  RouteTable
  # ------------------------------------------------------------#
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

# ------------------------------------------------------------#
#  VPC Gateway Attachment
# ------------------------------------------------------------#
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

# ------------------------------------------------------------#
#  Route
# ------------------------------------------------------------#
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway


# ------------------------------------------------------------#
# Elastic IP
# ------------------------------------------------------------#
  EIP:
    Type: AWS::EC2::EIP
# ------------------------------------------------------------#
# NatGateway
# ------------------------------------------------------------#
  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt EIP.AllocationId
  #     SubnetId: !Ref PublicSubnetA

# ------------------------------------------------------------#
# VPCEndpoint
# ------------------------------------------------------------#
  VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: com.amazonaws.ap-northeast-1.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

# ------------------------------------------------------------#
# Outputs
# ------------------------------------------------------------#
Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: NetworkLayer-VPC
  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Export:
      Name: NetworkLayer-PublicSubnetA
  PublicSubnetB:
    Value: !Ref PublicSubnetB
    Export:
      Name: NetworkLayer-PublicSubnetB
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
    Export:
      Name: NetworkLayer-PrivateSubnetA
  PrivateSubnetB:
    Value: !Ref PrivateSubnetB
    Export:
      Name: NetworkLayer-PrivateSubnetB
  EIP:
    Value: !GetAtt EIP.AllocationId
    Export:
      Name: NetworkLayer-EIP